// Code generated by "enumer -type=BattleAction,IdleAction -json -transform=snake -output response_enumer.go -trimprefix BattleAction,IdleAction"; DO NOT EDIT.

//
package ocgcore

import (
	"encoding/json"
	"fmt"
)

const _BattleActionName = "chainattackto_m2to_ep"

var _BattleActionIndex = [...]uint8{0, 5, 11, 16, 21}

func (i BattleAction) String() string {
	if i < 0 || i >= BattleAction(len(_BattleActionIndex)-1) {
		return fmt.Sprintf("BattleAction(%d)", i)
	}
	return _BattleActionName[_BattleActionIndex[i]:_BattleActionIndex[i+1]]
}

var _BattleActionValues = []BattleAction{0, 1, 2, 3}

var _BattleActionNameToValueMap = map[string]BattleAction{
	_BattleActionName[0:5]:   0,
	_BattleActionName[5:11]:  1,
	_BattleActionName[11:16]: 2,
	_BattleActionName[16:21]: 3,
}

// BattleActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BattleActionString(s string) (BattleAction, error) {
	if val, ok := _BattleActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BattleAction values", s)
}

// BattleActionValues returns all values of the enum
func BattleActionValues() []BattleAction {
	return _BattleActionValues
}

// IsABattleAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BattleAction) IsABattleAction() bool {
	for _, v := range _BattleActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BattleAction
func (i BattleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BattleAction
func (i *BattleAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BattleAction should be a string, got %s", data)
	}

	var err error
	*i, err = BattleActionString(s)
	return err
}

const _IdleActionName = "summonsp_summonpos_changemonster_setspell_setactivateto_bpto_epshuffle"

var _IdleActionIndex = [...]uint8{0, 6, 15, 25, 36, 45, 53, 58, 63, 70}

func (i IdleAction) String() string {
	if i < 0 || i >= IdleAction(len(_IdleActionIndex)-1) {
		return fmt.Sprintf("IdleAction(%d)", i)
	}
	return _IdleActionName[_IdleActionIndex[i]:_IdleActionIndex[i+1]]
}

var _IdleActionValues = []IdleAction{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _IdleActionNameToValueMap = map[string]IdleAction{
	_IdleActionName[0:6]:   0,
	_IdleActionName[6:15]:  1,
	_IdleActionName[15:25]: 2,
	_IdleActionName[25:36]: 3,
	_IdleActionName[36:45]: 4,
	_IdleActionName[45:53]: 5,
	_IdleActionName[53:58]: 6,
	_IdleActionName[58:63]: 7,
	_IdleActionName[63:70]: 8,
}

// IdleActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IdleActionString(s string) (IdleAction, error) {
	if val, ok := _IdleActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IdleAction values", s)
}

// IdleActionValues returns all values of the enum
func IdleActionValues() []IdleAction {
	return _IdleActionValues
}

// IsAIdleAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IdleAction) IsAIdleAction() bool {
	for _, v := range _IdleActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IdleAction
func (i IdleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IdleAction
func (i *IdleAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IdleAction should be a string, got %s", data)
	}

	var err error
	*i, err = IdleActionString(s)
	return err
}
