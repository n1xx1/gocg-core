// Code generated by "enumer -type=Location,FieldPlace,DetailedPhase,Phase,BattlePosition,FacePosition,Position -json -transform=snake -output enum_enumer.go -trimprefix Location,FieldPlace,DetailedPhase,Phase,BattlePosition,FacePosition,Position"; DO NOT EDIT.

//
package ocgcore

import (
	"encoding/json"
	"fmt"
)

const _LocationName = "unknowndeckhandgravebanishedextra_deckoverlaymonster_zonespell_zonefield_zonependulum_zone"

var _LocationIndex = [...]uint8{0, 7, 11, 15, 20, 28, 38, 45, 57, 67, 77, 90}

func (i Location) String() string {
	if i >= Location(len(_LocationIndex)-1) {
		return fmt.Sprintf("Location(%d)", i)
	}
	return _LocationName[_LocationIndex[i]:_LocationIndex[i+1]]
}

var _LocationValues = []Location{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _LocationNameToValueMap = map[string]Location{
	_LocationName[0:7]:   0,
	_LocationName[7:11]:  1,
	_LocationName[11:15]: 2,
	_LocationName[15:20]: 3,
	_LocationName[20:28]: 4,
	_LocationName[28:38]: 5,
	_LocationName[38:45]: 6,
	_LocationName[45:57]: 7,
	_LocationName[57:67]: 8,
	_LocationName[67:77]: 9,
	_LocationName[77:90]: 10,
}

// LocationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LocationString(s string) (Location, error) {
	if val, ok := _LocationNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Location values", s)
}

// LocationValues returns all values of the enum
func LocationValues() []Location {
	return _LocationValues
}

// IsALocation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Location) IsALocation() bool {
	for _, v := range _LocationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Location
func (i Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Location
func (i *Location) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Location should be a string, got %s", data)
	}

	var err error
	*i, err = LocationString(s)
	return err
}

const _FieldPlaceName = "monster1monster2monster3monster4monster5monster_extra1monster_extra2spell0spell1spell2spell3spell4spell_fieldspell_pendulum1spell_pendulum2"

var _FieldPlaceIndex = [...]uint8{0, 8, 16, 24, 32, 40, 54, 68, 74, 80, 86, 92, 98, 109, 124, 139}

func (i FieldPlace) String() string {
	if i < 0 || i >= FieldPlace(len(_FieldPlaceIndex)-1) {
		return fmt.Sprintf("FieldPlace(%d)", i)
	}
	return _FieldPlaceName[_FieldPlaceIndex[i]:_FieldPlaceIndex[i+1]]
}

var _FieldPlaceValues = []FieldPlace{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

var _FieldPlaceNameToValueMap = map[string]FieldPlace{
	_FieldPlaceName[0:8]:     0,
	_FieldPlaceName[8:16]:    1,
	_FieldPlaceName[16:24]:   2,
	_FieldPlaceName[24:32]:   3,
	_FieldPlaceName[32:40]:   4,
	_FieldPlaceName[40:54]:   5,
	_FieldPlaceName[54:68]:   6,
	_FieldPlaceName[68:74]:   7,
	_FieldPlaceName[74:80]:   8,
	_FieldPlaceName[80:86]:   9,
	_FieldPlaceName[86:92]:   10,
	_FieldPlaceName[92:98]:   11,
	_FieldPlaceName[98:109]:  12,
	_FieldPlaceName[109:124]: 13,
	_FieldPlaceName[124:139]: 14,
}

// FieldPlaceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FieldPlaceString(s string) (FieldPlace, error) {
	if val, ok := _FieldPlaceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FieldPlace values", s)
}

// FieldPlaceValues returns all values of the enum
func FieldPlaceValues() []FieldPlace {
	return _FieldPlaceValues
}

// IsAFieldPlace returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FieldPlace) IsAFieldPlace() bool {
	for _, v := range _FieldPlaceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FieldPlace
func (i FieldPlace) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FieldPlace
func (i *FieldPlace) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FieldPlace should be a string, got %s", data)
	}

	var err error
	*i, err = FieldPlaceString(s)
	return err
}

const _DetailedPhaseName = "unknowndrawstandbymain1battle_startbattle_stepdamagedamage_calculationbattlemain2end"

var _DetailedPhaseIndex = [...]uint8{0, 7, 11, 18, 23, 35, 46, 52, 70, 76, 81, 84}

func (i DetailedPhase) String() string {
	if i >= DetailedPhase(len(_DetailedPhaseIndex)-1) {
		return fmt.Sprintf("DetailedPhase(%d)", i)
	}
	return _DetailedPhaseName[_DetailedPhaseIndex[i]:_DetailedPhaseIndex[i+1]]
}

var _DetailedPhaseValues = []DetailedPhase{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _DetailedPhaseNameToValueMap = map[string]DetailedPhase{
	_DetailedPhaseName[0:7]:   0,
	_DetailedPhaseName[7:11]:  1,
	_DetailedPhaseName[11:18]: 2,
	_DetailedPhaseName[18:23]: 3,
	_DetailedPhaseName[23:35]: 4,
	_DetailedPhaseName[35:46]: 5,
	_DetailedPhaseName[46:52]: 6,
	_DetailedPhaseName[52:70]: 7,
	_DetailedPhaseName[70:76]: 8,
	_DetailedPhaseName[76:81]: 9,
	_DetailedPhaseName[81:84]: 10,
}

// DetailedPhaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DetailedPhaseString(s string) (DetailedPhase, error) {
	if val, ok := _DetailedPhaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DetailedPhase values", s)
}

// DetailedPhaseValues returns all values of the enum
func DetailedPhaseValues() []DetailedPhase {
	return _DetailedPhaseValues
}

// IsADetailedPhase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DetailedPhase) IsADetailedPhase() bool {
	for _, v := range _DetailedPhaseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DetailedPhase
func (i DetailedPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DetailedPhase
func (i *DetailedPhase) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DetailedPhase should be a string, got %s", data)
	}

	var err error
	*i, err = DetailedPhaseString(s)
	return err
}

const _PhaseName = "unknowndpspm1bpm2ep"

var _PhaseIndex = [...]uint8{0, 7, 9, 11, 13, 15, 17, 19}

func (i Phase) String() string {
	if i >= Phase(len(_PhaseIndex)-1) {
		return fmt.Sprintf("Phase(%d)", i)
	}
	return _PhaseName[_PhaseIndex[i]:_PhaseIndex[i+1]]
}

var _PhaseValues = []Phase{0, 1, 2, 3, 4, 5, 6}

var _PhaseNameToValueMap = map[string]Phase{
	_PhaseName[0:7]:   0,
	_PhaseName[7:9]:   1,
	_PhaseName[9:11]:  2,
	_PhaseName[11:13]: 3,
	_PhaseName[13:15]: 4,
	_PhaseName[15:17]: 5,
	_PhaseName[17:19]: 6,
}

// PhaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PhaseString(s string) (Phase, error) {
	if val, ok := _PhaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Phase values", s)
}

// PhaseValues returns all values of the enum
func PhaseValues() []Phase {
	return _PhaseValues
}

// IsAPhase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Phase) IsAPhase() bool {
	for _, v := range _PhaseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Phase
func (i Phase) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Phase
func (i *Phase) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Phase should be a string, got %s", data)
	}

	var err error
	*i, err = PhaseString(s)
	return err
}

const _BattlePositionName = "unknownattackdefense"

var _BattlePositionIndex = [...]uint8{0, 7, 13, 20}

func (i BattlePosition) String() string {
	if i < 0 || i >= BattlePosition(len(_BattlePositionIndex)-1) {
		return fmt.Sprintf("BattlePosition(%d)", i)
	}
	return _BattlePositionName[_BattlePositionIndex[i]:_BattlePositionIndex[i+1]]
}

var _BattlePositionValues = []BattlePosition{0, 1, 2}

var _BattlePositionNameToValueMap = map[string]BattlePosition{
	_BattlePositionName[0:7]:   0,
	_BattlePositionName[7:13]:  1,
	_BattlePositionName[13:20]: 2,
}

// BattlePositionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BattlePositionString(s string) (BattlePosition, error) {
	if val, ok := _BattlePositionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BattlePosition values", s)
}

// BattlePositionValues returns all values of the enum
func BattlePositionValues() []BattlePosition {
	return _BattlePositionValues
}

// IsABattlePosition returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BattlePosition) IsABattlePosition() bool {
	for _, v := range _BattlePositionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BattlePosition
func (i BattlePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BattlePosition
func (i *BattlePosition) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BattlePosition should be a string, got %s", data)
	}

	var err error
	*i, err = BattlePositionString(s)
	return err
}

const _FacePositionName = "unknownupdown"

var _FacePositionIndex = [...]uint8{0, 7, 9, 13}

func (i FacePosition) String() string {
	if i < 0 || i >= FacePosition(len(_FacePositionIndex)-1) {
		return fmt.Sprintf("FacePosition(%d)", i)
	}
	return _FacePositionName[_FacePositionIndex[i]:_FacePositionIndex[i+1]]
}

var _FacePositionValues = []FacePosition{0, 1, 2}

var _FacePositionNameToValueMap = map[string]FacePosition{
	_FacePositionName[0:7]:  0,
	_FacePositionName[7:9]:  1,
	_FacePositionName[9:13]: 2,
}

// FacePositionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FacePositionString(s string) (FacePosition, error) {
	if val, ok := _FacePositionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FacePosition values", s)
}

// FacePositionValues returns all values of the enum
func FacePositionValues() []FacePosition {
	return _FacePositionValues
}

// IsAFacePosition returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FacePosition) IsAFacePosition() bool {
	for _, v := range _FacePositionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FacePosition
func (i FacePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FacePosition
func (i *FacePosition) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FacePosition should be a string, got %s", data)
	}

	var err error
	*i, err = FacePositionString(s)
	return err
}

const _PositionName = "unknownface_up_attackface_down_attackface_up_defenseface_down_defense"

var _PositionIndex = [...]uint8{0, 7, 21, 37, 52, 69}

func (i Position) String() string {
	if i >= Position(len(_PositionIndex)-1) {
		return fmt.Sprintf("Position(%d)", i)
	}
	return _PositionName[_PositionIndex[i]:_PositionIndex[i+1]]
}

var _PositionValues = []Position{0, 1, 2, 3, 4}

var _PositionNameToValueMap = map[string]Position{
	_PositionName[0:7]:   0,
	_PositionName[7:21]:  1,
	_PositionName[21:37]: 2,
	_PositionName[37:52]: 3,
	_PositionName[52:69]: 4,
}

// PositionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PositionString(s string) (Position, error) {
	if val, ok := _PositionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Position values", s)
}

// PositionValues returns all values of the enum
func PositionValues() []Position {
	return _PositionValues
}

// IsAPosition returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Position) IsAPosition() bool {
	for _, v := range _PositionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Position
func (i Position) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Position
func (i *Position) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Position should be a string, got %s", data)
	}

	var err error
	*i, err = PositionString(s)
	return err
}
